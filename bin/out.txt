[do (]
main loop: doToken = do
currNodep = 4096, idx = 0
rightp = 4097, celltyp = DO, kwd = DO
addNode: nodep = 4097, idx = 1, kwd = DO
do
doToken: do
currNodep = 4097, idx = 1
rightp = 4098, celltyp = PTR, kwd = DO
doParen: downp = 4099
addNode: nodep = 4099, idx = 3, kwd = ZPAREN
( [import m3 (as m1 m2) m480 (as (: m n) m99);]
main loop: doToken = import
List kwtyp = IMPORT, downp = 3
currNodep = 4099, celltyp = KWD
addNode: nodep = 4099, idx = 3, kwd = IMPORT
import
doToken: import
main loop: doToken = m3
Ident added: m3
currNodep = 4099, idx = 3
rightp = 4100, celltyp = ID, kwd = IMPORT
addNode: nodep = 4100, idx = 4, kwd = IMPORT
m3
doToken: m3
currNodep = 4100, idx = 4
rightp = 4101, celltyp = PTR, kwd = IMPORT
doParen: downp = 4102
addNode: nodep = 4102, idx = 6, kwd = ZPAREN
( main loop: doToken = as
List kwtyp = AS, downp = 6
currNodep = 4102, celltyp = KWD
addNode: nodep = 4102, idx = 6, kwd = AS
as
doToken: as
main loop: doToken = m1
Ident added: m1
currNodep = 4102, idx = 6
rightp = 4103, celltyp = ID, kwd = AS
addNode: nodep = 4103, idx = 7, kwd = AS
m1
doToken: m1
main loop: doToken = m2
Ident added: m2
currNodep = 4103, idx = 7
rightp = 4104, celltyp = ID, kwd = AS
addNode: nodep = 4104, idx = 8, kwd = AS
m2
doToken: m2
byteval popped = 6
1:pop currNodep = 4101
byteval = 3
) main loop: doToken = m480
Ident added: m480
currNodep = 4101, idx = 5
rightp = 4105, celltyp = ID, kwd = IMPORT
addNode: nodep = 4105, idx = 9, kwd = IMPORT
m480
doToken: m480
currNodep = 4105, idx = 9
rightp = 4106, celltyp = PTR, kwd = IMPORT
doParen: downp = 4107
addNode: nodep = 4107, idx = 11, kwd = ZPAREN
( main loop: doToken = as
List kwtyp = AS, downp = 6
currNodep = 4107, celltyp = KWD
addNode: nodep = 4107, idx = 11, kwd = AS
as
doToken: as
currNodep = 4107, idx = 11
rightp = 4108, celltyp = PTR, kwd = AS
doParen: downp = 4109
addNode: nodep = 4109, idx = 13, kwd = ZPAREN
( main loop: doToken = :
List kwtyp = DOT, downp = 53
currNodep = 4109, celltyp = KWD
addNode: nodep = 4109, idx = 13, kwd = DOT
:
doToken: :
main loop: doToken = m
Ident added: m
currNodep = 4109, idx = 13
rightp = 4110, celltyp = ID, kwd = DOT
addNode: nodep = 4110, idx = 14, kwd = DOT
m
doToken: m
main loop: doToken = n
Ident added: n
currNodep = 4110, idx = 14
rightp = 4111, celltyp = ID, kwd = DOT
addNode: nodep = 4111, idx = 15, kwd = DOT
n
doToken: n
byteval popped = 53
1:pop currNodep = 4108
byteval = 6
) main loop: doToken = m99
Ident added: m99
currNodep = 4108, idx = 12
rightp = 4112, celltyp = ID, kwd = AS
addNode: nodep = 4112, idx = 16, kwd = AS
m99
doToken: m99
byteval popped = 6
1:pop currNodep = 4106
byteval = 6
) byteval popped = 6
1:pop currNodep = 4098
byteval = 3
currNodep = 4098, idx = 2
rightp = 4113, celltyp = PTR, kwd = DO
doParen: downp = 4114
addNode: nodep = 4114, idx = 18, kwd = ZPAREN
; [import m (dot h1 j2) n;]
main loop: doToken = import
List kwtyp = IMPORT, downp = 3
currNodep = 4114, celltyp = KWD
addNode: nodep = 4114, idx = 18, kwd = IMPORT
import
doToken: import
main loop: doToken = m
Ident added: m
currNodep = 4114, idx = 18
rightp = 4115, celltyp = ID, kwd = IMPORT
addNode: nodep = 4115, idx = 19, kwd = IMPORT
m
doToken: m
currNodep = 4115, idx = 19
rightp = 4116, celltyp = PTR, kwd = IMPORT
doParen: downp = 4117
addNode: nodep = 4117, idx = 21, kwd = ZPAREN
( main loop: doToken = dot
List kwtyp = DOT, downp = 53
currNodep = 4117, celltyp = KWD
addNode: nodep = 4117, idx = 21, kwd = DOT
dot
doToken: dot
main loop: doToken = h1
Ident added: h1
currNodep = 4117, idx = 21
rightp = 4118, celltyp = ID, kwd = DOT
addNode: nodep = 4118, idx = 22, kwd = DOT
h1
doToken: h1
main loop: doToken = j2
Ident added: j2
currNodep = 4118, idx = 22
rightp = 4119, celltyp = ID, kwd = DOT
addNode: nodep = 4119, idx = 23, kwd = DOT
j2
doToken: j2
byteval popped = 53
1:pop currNodep = 4116
byteval = 3
) main loop: doToken = n
Ident added: n
currNodep = 4116, idx = 20
rightp = 4120, celltyp = ID, kwd = IMPORT
addNode: nodep = 4120, idx = 24, kwd = IMPORT
n
doToken: n
byteval popped = 3
1:pop currNodep = 4113
byteval = 3
currNodep = 4113, idx = 17
rightp = 4121, celltyp = PTR, kwd = DO
doParen: downp = 4122
addNode: nodep = 4122, idx = 26, kwd = ZPAREN
; [from (: a b c d e) import m2 (as a1 a2);]
main loop: doToken = from
List kwtyp = FROM, downp = 4
currNodep = 4122, celltyp = KWD
addNode: nodep = 4122, idx = 26, kwd = FROM
from
doToken: from
currNodep = 4122, idx = 26
rightp = 4123, celltyp = PTR, kwd = FROM
doParen: downp = 4124
addNode: nodep = 4124, idx = 28, kwd = ZPAREN
( main loop: doToken = :
List kwtyp = DOT, downp = 53
currNodep = 4124, celltyp = KWD
addNode: nodep = 4124, idx = 28, kwd = DOT
:
doToken: :
main loop: doToken = a
Ident added: a
currNodep = 4124, idx = 28
rightp = 4125, celltyp = ID, kwd = DOT
addNode: nodep = 4125, idx = 29, kwd = DOT
a
doToken: a
main loop: doToken = b
Ident added: b
currNodep = 4125, idx = 29
rightp = 4126, celltyp = ID, kwd = DOT
addNode: nodep = 4126, idx = 30, kwd = DOT
b
doToken: b
main loop: doToken = c
Ident added: c
currNodep = 4126, idx = 30
rightp = 4127, celltyp = ID, kwd = DOT
addNode: nodep = 4127, idx = 31, kwd = DOT
c
doToken: c
main loop: doToken = d
Ident added: d
currNodep = 4127, idx = 31
rightp = 4128, celltyp = ID, kwd = DOT
addNode: nodep = 4128, idx = 32, kwd = DOT
d
doToken: d
main loop: doToken = e
Ident added: e
currNodep = 4128, idx = 32
rightp = 4129, celltyp = ID, kwd = DOT
addNode: nodep = 4129, idx = 33, kwd = DOT
e
doToken: e
byteval popped = 53
1:pop currNodep = 4123
byteval = 4
) main loop: doToken = import
currNodep = 4123, idx = 27
rightp = 4130, celltyp = KWD, kwd = IMPORT
addNode: nodep = 4130, idx = 34, kwd = IMPORT
import
doToken: import
main loop: doToken = m2
Ident added: m2
currNodep = 4130, idx = 34
rightp = 4131, celltyp = ID, kwd = IMPORT
addNode: nodep = 4131, idx = 35, kwd = IMPORT
m2
doToken: m2
currNodep = 4131, idx = 35
rightp = 4132, celltyp = PTR, kwd = IMPORT
doParen: downp = 4133
addNode: nodep = 4133, idx = 37, kwd = ZPAREN
( main loop: doToken = as
List kwtyp = AS, downp = 6
currNodep = 4133, celltyp = KWD
addNode: nodep = 4133, idx = 37, kwd = AS
as
doToken: as
main loop: doToken = a1
Ident added: a1
currNodep = 4133, idx = 37
rightp = 4134, celltyp = ID, kwd = AS
addNode: nodep = 4134, idx = 38, kwd = AS
a1
doToken: a1
main loop: doToken = a2
Ident added: a2
currNodep = 4134, idx = 38
rightp = 4135, celltyp = ID, kwd = AS
addNode: nodep = 4135, idx = 39, kwd = AS
a2
doToken: a2
byteval popped = 6
1:pop currNodep = 4132
byteval = 3
) byteval popped = 3
1:pop currNodep = 4121
byteval = 4
currNodep = 4121, idx = 25
rightp = 4136, celltyp = PTR, kwd = DO
doParen: downp = 4137
addNode: nodep = 4137, idx = 41, kwd = ZPAREN
; [from rm2 import m3 (as m1 m2) m480 (as n777 m99);]
main loop: doToken = from
List kwtyp = FROM, downp = 4
currNodep = 4137, celltyp = KWD
addNode: nodep = 4137, idx = 41, kwd = FROM
from
doToken: from
main loop: doToken = rm2
Ident added: rm2
currNodep = 4137, idx = 41
rightp = 4138, celltyp = ID, kwd = FROM
addNode: nodep = 4138, idx = 42, kwd = FROM
rm2
doToken: rm2
main loop: doToken = import
currNodep = 4138, idx = 42
rightp = 4139, celltyp = KWD, kwd = IMPORT
addNode: nodep = 4139, idx = 43, kwd = IMPORT
import
doToken: import
main loop: doToken = m3
Ident added: m3
currNodep = 4139, idx = 43
rightp = 4140, celltyp = ID, kwd = IMPORT
addNode: nodep = 4140, idx = 44, kwd = IMPORT
m3
doToken: m3
currNodep = 4140, idx = 44
rightp = 4141, celltyp = PTR, kwd = IMPORT
doParen: downp = 4142
addNode: nodep = 4142, idx = 46, kwd = ZPAREN
( main loop: doToken = as
List kwtyp = AS, downp = 6
currNodep = 4142, celltyp = KWD
addNode: nodep = 4142, idx = 46, kwd = AS
as
doToken: as
main loop: doToken = m1
Ident added: m1
currNodep = 4142, idx = 46
rightp = 4143, celltyp = ID, kwd = AS
addNode: nodep = 4143, idx = 47, kwd = AS
m1
doToken: m1
main loop: doToken = m2
Ident added: m2
currNodep = 4143, idx = 47
rightp = 4144, celltyp = ID, kwd = AS
addNode: nodep = 4144, idx = 48, kwd = AS
m2
doToken: m2
byteval popped = 6
1:pop currNodep = 4141
byteval = 3
) main loop: doToken = m480
Ident added: m480
currNodep = 4141, idx = 45
rightp = 4145, celltyp = ID, kwd = IMPORT
addNode: nodep = 4145, idx = 49, kwd = IMPORT
m480
doToken: m480
currNodep = 4145, idx = 49
rightp = 4146, celltyp = PTR, kwd = IMPORT
doParen: downp = 4147
addNode: nodep = 4147, idx = 51, kwd = ZPAREN
( main loop: doToken = as
List kwtyp = AS, downp = 6
currNodep = 4147, celltyp = KWD
addNode: nodep = 4147, idx = 51, kwd = AS
as
doToken: as
main loop: doToken = n777
Ident added: n777
currNodep = 4147, idx = 51
rightp = 4148, celltyp = ID, kwd = AS
addNode: nodep = 4148, idx = 52, kwd = AS
n777
doToken: n777
main loop: doToken = m99
Ident added: m99
currNodep = 4148, idx = 52
rightp = 4149, celltyp = ID, kwd = AS
addNode: nodep = 4149, idx = 53, kwd = AS
m99
doToken: m99
byteval popped = 6
1:pop currNodep = 4146
byteval = 3
) byteval popped = 3
1:pop currNodep = 4136
byteval = 3
currNodep = 4136, idx = 40
rightp = 4150, celltyp = PTR, kwd = DO
doParen: downp = 4151
addNode: nodep = 4151, idx = 55, kwd = ZPAREN
; [gdefun]
List kwtyp = GDEFUN, downp = 15
currNodep = 4151, celltyp = KWD
addNode: nodep = 4151, idx = 55, kwd = GDEFUN
gdefun
doToken: gdefun
[(var y z x23)]
currNodep = 4151, idx = 55
rightp = 4152, celltyp = PTR, kwd = GDEFUN
doParen: downp = 4153
addNode: nodep = 4153, idx = 57, kwd = ZPAREN
( main loop: doToken = var
List kwtyp = VAR, downp = 17
currNodep = 4153, celltyp = KWD
addNode: nodep = 4153, idx = 57, kwd = VAR
var
doToken: var
main loop: doToken = y
Ident added: y
currNodep = 4153, idx = 57
rightp = 4154, celltyp = ID, kwd = VAR
addNode: nodep = 4154, idx = 58, kwd = VAR
y
doToken: y
main loop: doToken = z
Ident added: z
currNodep = 4154, idx = 58
rightp = 4155, celltyp = ID, kwd = VAR
addNode: nodep = 4155, idx = 59, kwd = VAR
z
doToken: z
main loop: doToken = x23
Ident added: x23
currNodep = 4155, idx = 59
rightp = 4156, celltyp = ID, kwd = VAR
addNode: nodep = 4156, idx = 60, kwd = VAR
x23
doToken: x23
byteval popped = 17
1:pop currNodep = 4152
byteval = 15
) [(ivar a)]
currNodep = 4152, idx = 56
rightp = 4157, celltyp = PTR, kwd = GDEFUN
doParen: downp = 4158
addNode: nodep = 4158, idx = 62, kwd = ZPAREN
( main loop: doToken = ivar
List kwtyp = IVAR, downp = 18
currNodep = 4158, celltyp = KWD
addNode: nodep = 4158, idx = 62, kwd = IVAR
ivar
doToken: ivar
main loop: doToken = a
Ident added: a
currNodep = 4158, idx = 62
rightp = 4159, celltyp = ID, kwd = IVAR
addNode: nodep = 4159, idx = 63, kwd = IVAR
a
doToken: a
byteval popped = 18
1:pop currNodep = 4157
byteval = 15
) [do (]
main loop: doToken = do
currNodep = 4157, idx = 61
rightp = 4160, celltyp = DO, kwd = DO
addNode: nodep = 4160, idx = 64, kwd = DO
do
doToken: do
currNodep = 4160, idx = 64
rightp = 4161, celltyp = PTR, kwd = DO
doParen: downp = 4162
addNode: nodep = 4162, idx = 66, kwd = ZPAREN
( [#set x y;]
[);]
byteval popped = 1
pop currNodep = 4161, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4160
) byteval popped = 15
1:pop currNodep = 4150
byteval = 15
currNodep = 4150, idx = 54
rightp = 4163, celltyp = PTR, kwd = DO
doParen: downp = 4164
addNode: nodep = 4164, idx = 68, kwd = ZPAREN
; [defun (f x y (set c 3) (= b "xyz")(= a 3.1416)(* d)(** e))]
main loop: doToken = defun
List kwtyp = DEFUN, downp = 12
currNodep = 4164, celltyp = KWD
addNode: nodep = 4164, idx = 68, kwd = DEFUN
defun
doToken: defun
currNodep = 4164, idx = 68
rightp = 4165, celltyp = PTR, kwd = DEFUN
doParen: downp = 4166
addNode: nodep = 4166, idx = 70, kwd = ZPAREN
( main loop: doToken = f
Ident added: f
Func kwtyp = CALL, downp = 8222
currNodep = 4166, celltyp = FUNC
addNode: nodep = 4166, idx = 70, kwd = CALL
f
doToken: f
main loop: doToken = x
Ident added: x
currNodep = 4166, idx = 70
rightp = 4167, celltyp = ID, kwd = CALL
addNode: nodep = 4167, idx = 71, kwd = CALL
x
doToken: x
main loop: doToken = y
Ident added: y
currNodep = 4167, idx = 71
rightp = 4168, celltyp = ID, kwd = CALL
addNode: nodep = 4168, idx = 72, kwd = CALL
y
doToken: y
currNodep = 4168, idx = 72
rightp = 4169, celltyp = PTR, kwd = CALL
doParen: downp = 4170
addNode: nodep = 4170, idx = 74, kwd = ZPAREN
( main loop: doToken = set
List kwtyp = SET, downp = 54
currNodep = 4170, celltyp = KWD
addNode: nodep = 4170, idx = 74, kwd = SET
set
doToken: set
main loop: doToken = c
Ident added: c
currNodep = 4170, idx = 74
rightp = 4171, celltyp = ID, kwd = SET
addNode: nodep = 4171, idx = 75, kwd = SET
c
doToken: c
main loop: doToken = 3
currNodep = 4171, idx = 75
rightp = 4172, celltyp = INT, kwd = SET
addNode: nodep = 4172, idx = 76, kwd = SET
3
doToken: 3
byteval popped = 54
1:pop currNodep = 4169
byteval = 26
) currNodep = 4169, idx = 73
rightp = 4173, celltyp = PTR, kwd = CALL
doParen: downp = 4174
addNode: nodep = 4174, idx = 78, kwd = ZPAREN
( main loop: doToken = =
List kwtyp = SET, downp = 54
currNodep = 4174, celltyp = KWD
addNode: nodep = 4174, idx = 78, kwd = SET
=
doToken: =
main loop: doToken = b
Ident added: b
currNodep = 4174, idx = 78
rightp = 4175, celltyp = ID, kwd = SET
addNode: nodep = 4175, idx = 79, kwd = SET
b
doToken: b
"xyz"
currNodep = 4175, idx = 79
rightp = 4176, celltyp = STRING, kwd = SET
addNode: nodep = 4176, idx = 80, kwd = SET
main loop: doToken = 
byteval popped = 54
1:pop currNodep = 4173
byteval = 26
) currNodep = 4173, idx = 77
rightp = 4177, celltyp = PTR, kwd = CALL
doParen: downp = 4178
addNode: nodep = 4178, idx = 82, kwd = ZPAREN
( main loop: doToken = =
List kwtyp = SET, downp = 54
currNodep = 4178, celltyp = KWD
addNode: nodep = 4178, idx = 82, kwd = SET
=
doToken: =
main loop: doToken = a
Ident added: a
currNodep = 4178, idx = 82
rightp = 4179, celltyp = ID, kwd = SET
addNode: nodep = 4179, idx = 83, kwd = SET
a
doToken: a
main loop: doToken = 3.1416
currNodep = 4179, idx = 83
rightp = 4180, celltyp = DOUBLE, kwd = SET
addNode: nodep = 4180, idx = 84, kwd = SET
3.1416
doToken: 3.1416
byteval popped = 54
1:pop currNodep = 4177
byteval = 26
) currNodep = 4177, idx = 81
rightp = 4181, celltyp = PTR, kwd = CALL
doParen: downp = 4182
addNode: nodep = 4182, idx = 86, kwd = ZPAREN
( main loop: doToken = *
List kwtyp = MPY, downp = 77
currNodep = 4182, celltyp = KWD
addNode: nodep = 4182, idx = 86, kwd = MPY
*
doToken: *
main loop: doToken = d
Ident added: d
currNodep = 4182, idx = 86
rightp = 4183, celltyp = ID, kwd = MPY
addNode: nodep = 4183, idx = 87, kwd = MPY
d
doToken: d
byteval popped = 77
1:pop currNodep = 4181
byteval = 26
) currNodep = 4181, idx = 85
rightp = 4184, celltyp = PTR, kwd = CALL
doParen: downp = 4185
addNode: nodep = 4185, idx = 89, kwd = ZPAREN
( main loop: doToken = **
List kwtyp = DBLSTAR, downp = 97
currNodep = 4185, celltyp = KWD
addNode: nodep = 4185, idx = 89, kwd = DBLSTAR
**
doToken: **
main loop: doToken = e
Ident added: e
currNodep = 4185, idx = 89
rightp = 4186, celltyp = ID, kwd = DBLSTAR
addNode: nodep = 4186, idx = 90, kwd = DBLSTAR
e
doToken: e
byteval popped = 97
1:pop currNodep = 4184
byteval = 26
) byteval popped = 26
1:pop currNodep = 4165
byteval = 26
) [(var u v)]
currNodep = 4165, idx = 69
rightp = 4187, celltyp = PTR, kwd = DEFUN
doParen: downp = 4188
addNode: nodep = 4188, idx = 92, kwd = ZPAREN
( main loop: doToken = var
List kwtyp = VAR, downp = 17
currNodep = 4188, celltyp = KWD
addNode: nodep = 4188, idx = 92, kwd = VAR
var
doToken: var
main loop: doToken = u
Ident added: u
currNodep = 4188, idx = 92
rightp = 4189, celltyp = ID, kwd = VAR
addNode: nodep = 4189, idx = 93, kwd = VAR
u
doToken: u
main loop: doToken = v
Ident added: v
currNodep = 4189, idx = 93
rightp = 4190, celltyp = ID, kwd = VAR
addNode: nodep = 4190, idx = 94, kwd = VAR
v
doToken: v
byteval popped = 17
1:pop currNodep = 4187
byteval = 12
) [(decor c d e (f g)(: a (A1 A2))(: b (c)))]
currNodep = 4187, idx = 91
rightp = 4191, celltyp = PTR, kwd = DEFUN
doParen: downp = 4192
addNode: nodep = 4192, idx = 96, kwd = ZPAREN
( main loop: doToken = decor
List kwtyp = DECOR, downp = 23
currNodep = 4192, celltyp = KWD
addNode: nodep = 4192, idx = 96, kwd = DECOR
decor
doToken: decor
main loop: doToken = c
Ident added: c
currNodep = 4192, idx = 96
rightp = 4193, celltyp = ID, kwd = DECOR
addNode: nodep = 4193, idx = 97, kwd = DECOR
c
doToken: c
main loop: doToken = d
Ident added: d
currNodep = 4193, idx = 97
rightp = 4194, celltyp = ID, kwd = DECOR
addNode: nodep = 4194, idx = 98, kwd = DECOR
d
doToken: d
main loop: doToken = e
Ident added: e
currNodep = 4194, idx = 98
rightp = 4195, celltyp = ID, kwd = DECOR
addNode: nodep = 4195, idx = 99, kwd = DECOR
e
doToken: e
currNodep = 4195, idx = 99
rightp = 4196, celltyp = PTR, kwd = DECOR
doParen: downp = 4197
addNode: nodep = 4197, idx = 101, kwd = ZPAREN
( main loop: doToken = f
Ident added: f
Func kwtyp = CALL, downp = 8236
currNodep = 4197, celltyp = FUNC
addNode: nodep = 4197, idx = 101, kwd = CALL
f
doToken: f
main loop: doToken = g
Ident added: g
currNodep = 4197, idx = 101
rightp = 4198, celltyp = ID, kwd = CALL
addNode: nodep = 4198, idx = 102, kwd = CALL
g
doToken: g
byteval popped = 26
1:pop currNodep = 4196
byteval = 23
) currNodep = 4196, idx = 100
rightp = 4199, celltyp = PTR, kwd = DECOR
doParen: downp = 4200
addNode: nodep = 4200, idx = 104, kwd = ZPAREN
( main loop: doToken = :
List kwtyp = DOT, downp = 53
currNodep = 4200, celltyp = KWD
addNode: nodep = 4200, idx = 104, kwd = DOT
:
doToken: :
main loop: doToken = a
Ident added: a
currNodep = 4200, idx = 104
rightp = 4201, celltyp = ID, kwd = DOT
addNode: nodep = 4201, idx = 105, kwd = DOT
a
doToken: a
currNodep = 4201, idx = 105
rightp = 4202, celltyp = PTR, kwd = DOT
doParen: downp = 4203
addNode: nodep = 4203, idx = 107, kwd = ZPAREN
( main loop: doToken = A1
Ident added: A1
Func kwtyp = CALL, downp = 8239
currNodep = 4203, celltyp = FUNC
addNode: nodep = 4203, idx = 107, kwd = CALL
A1
doToken: A1
main loop: doToken = A2
Ident added: A2
currNodep = 4203, idx = 107
rightp = 4204, celltyp = ID, kwd = CALL
addNode: nodep = 4204, idx = 108, kwd = CALL
A2
doToken: A2
byteval popped = 26
1:pop currNodep = 4202
byteval = 53
) byteval popped = 53
1:pop currNodep = 4199
byteval = 53
) currNodep = 4199, idx = 103
rightp = 4205, celltyp = PTR, kwd = DECOR
doParen: downp = 4206
addNode: nodep = 4206, idx = 110, kwd = ZPAREN
( main loop: doToken = :
List kwtyp = DOT, downp = 53
currNodep = 4206, celltyp = KWD
addNode: nodep = 4206, idx = 110, kwd = DOT
:
doToken: :
main loop: doToken = b
Ident added: b
currNodep = 4206, idx = 110
rightp = 4207, celltyp = ID, kwd = DOT
addNode: nodep = 4207, idx = 111, kwd = DOT
b
doToken: b
currNodep = 4207, idx = 111
rightp = 4208, celltyp = PTR, kwd = DOT
doParen: downp = 4209
addNode: nodep = 4209, idx = 113, kwd = ZPAREN
( main loop: doToken = c
Ident added: c
Func kwtyp = CALL, downp = 8242
currNodep = 4209, celltyp = FUNC
addNode: nodep = 4209, idx = 113, kwd = CALL
c
doToken: c
byteval popped = 26
1:pop currNodep = 4208
byteval = 53
) byteval popped = 53
1:pop currNodep = 4205
byteval = 53
) byteval popped = 53
1:pop currNodep = 4191
byteval = 23
) [do (]
main loop: doToken = do
currNodep = 4191, idx = 95
rightp = 4210, celltyp = DO, kwd = DO
addNode: nodep = 4210, idx = 114, kwd = DO
do
doToken: do
currNodep = 4210, idx = 114
rightp = 4211, celltyp = PTR, kwd = DO
doParen: downp = 4212
addNode: nodep = 4212, idx = 116, kwd = ZPAREN
( [set w 66;]
main loop: doToken = set
List kwtyp = SET, downp = 54
currNodep = 4212, celltyp = KWD
addNode: nodep = 4212, idx = 116, kwd = SET
set
doToken: set
main loop: doToken = w
Ident added: w
currNodep = 4212, idx = 116
rightp = 4213, celltyp = ID, kwd = SET
addNode: nodep = 4213, idx = 117, kwd = SET
w
doToken: w
main loop: doToken = 66
currNodep = 4213, idx = 117
rightp = 4214, celltyp = INT, kwd = SET
addNode: nodep = 4214, idx = 118, kwd = SET
66
doToken: 66
byteval popped = 54
1:pop currNodep = 4211
byteval = 2
currNodep = 4211, idx = 115
rightp = 4215, celltyp = PTR, kwd = DO
doParen: downp = 4216
addNode: nodep = 4216, idx = 120, kwd = ZPAREN
; [);]
byteval popped = 1
pop currNodep = 4215, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4210
) byteval popped = 2
1:pop currNodep = 4163
byteval = 23
currNodep = 4163, idx = 67
rightp = 4217, celltyp = PTR, kwd = DO
doParen: downp = 4218
addNode: nodep = 4218, idx = 122, kwd = ZPAREN
; [idefun (g)]
main loop: doToken = idefun
List kwtyp = IDEFUN, downp = 13
currNodep = 4218, celltyp = KWD
addNode: nodep = 4218, idx = 122, kwd = IDEFUN
idefun
doToken: idefun
currNodep = 4218, idx = 122
rightp = 4219, celltyp = PTR, kwd = IDEFUN
doParen: downp = 4220
addNode: nodep = 4220, idx = 124, kwd = ZPAREN
( main loop: doToken = g
Ident added: g
Func kwtyp = CALL, downp = 8244
currNodep = 4220, celltyp = FUNC
addNode: nodep = 4220, idx = 124, kwd = CALL
g
doToken: g
byteval popped = 26
1:pop currNodep = 4219
byteval = 13
) [(var h1 h2 h3)]
currNodep = 4219, idx = 123
rightp = 4221, celltyp = PTR, kwd = IDEFUN
doParen: downp = 4222
addNode: nodep = 4222, idx = 126, kwd = ZPAREN
( main loop: doToken = var
List kwtyp = VAR, downp = 17
currNodep = 4222, celltyp = KWD
addNode: nodep = 4222, idx = 126, kwd = VAR
var
doToken: var
main loop: doToken = h1
Ident added: h1
currNodep = 4222, idx = 126
rightp = 4223, celltyp = ID, kwd = VAR
addNode: nodep = 4223, idx = 127, kwd = VAR
h1
doToken: h1
main loop: doToken = h2
Ident added: h2
currNodep = 4223, idx = 127
rightp = 4224, celltyp = ID, kwd = VAR
addNode: nodep = 4224, idx = 128, kwd = VAR
h2
doToken: h2
main loop: doToken = h3
Ident added: h3
currNodep = 4224, idx = 128
rightp = 4225, celltyp = ID, kwd = VAR
addNode: nodep = 4225, idx = 129, kwd = VAR
h3
doToken: h3
byteval popped = 17
1:pop currNodep = 4221
byteval = 13
) [do (]
main loop: doToken = do
currNodep = 4221, idx = 125
rightp = 4226, celltyp = DO, kwd = DO
addNode: nodep = 4226, idx = 130, kwd = DO
do
doToken: do
currNodep = 4226, idx = 130
rightp = 4227, celltyp = PTR, kwd = DO
doParen: downp = 4228
addNode: nodep = 4228, idx = 132, kwd = ZPAREN
( [if flag do (]
main loop: doToken = if
List kwtyp = IF, downp = 29
currNodep = 4228, celltyp = KWD
addNode: nodep = 4228, idx = 132, kwd = IF
if
doToken: if
main loop: doToken = flag
Ident added: flag
currNodep = 4228, idx = 132
rightp = 4229, celltyp = ID, kwd = IF
addNode: nodep = 4229, idx = 133, kwd = IF
flag
doToken: flag
main loop: doToken = do
currNodep = 4229, idx = 133
rightp = 4230, celltyp = DO, kwd = DO
addNode: nodep = 4230, idx = 134, kwd = DO
do
doToken: do
currNodep = 4230, idx = 134
rightp = 4231, celltyp = PTR, kwd = DO
doParen: downp = 4232
addNode: nodep = 4232, idx = 136, kwd = ZPAREN
( [set q r;]
main loop: doToken = set
List kwtyp = SET, downp = 54
currNodep = 4232, celltyp = KWD
addNode: nodep = 4232, idx = 136, kwd = SET
set
doToken: set
main loop: doToken = q
Ident added: q
currNodep = 4232, idx = 136
rightp = 4233, celltyp = ID, kwd = SET
addNode: nodep = 4233, idx = 137, kwd = SET
q
doToken: q
main loop: doToken = r
Ident added: r
currNodep = 4233, idx = 137
rightp = 4234, celltyp = ID, kwd = SET
addNode: nodep = 4234, idx = 138, kwd = SET
r
doToken: r
byteval popped = 54
1:pop currNodep = 4231
byteval = 2
currNodep = 4231, idx = 135
rightp = 4235, celltyp = PTR, kwd = DO
doParen: downp = 4236
addNode: nodep = 4236, idx = 140, kwd = ZPAREN
; [);]
byteval popped = 1
pop currNodep = 4235, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4230
) byteval popped = 2
1:pop currNodep = 4227
byteval = 29
currNodep = 4227, idx = 131
rightp = 4237, celltyp = PTR, kwd = DO
doParen: downp = 4238
addNode: nodep = 4238, idx = 142, kwd = ZPAREN
; [set a z;]
main loop: doToken = set
List kwtyp = SET, downp = 54
currNodep = 4238, celltyp = KWD
addNode: nodep = 4238, idx = 142, kwd = SET
set
doToken: set
main loop: doToken = a
Ident added: a
currNodep = 4238, idx = 142
rightp = 4239, celltyp = ID, kwd = SET
addNode: nodep = 4239, idx = 143, kwd = SET
a
doToken: a
main loop: doToken = z
Ident added: z
currNodep = 4239, idx = 143
rightp = 4240, celltyp = ID, kwd = SET
addNode: nodep = 4240, idx = 144, kwd = SET
z
doToken: z
byteval popped = 54
1:pop currNodep = 4237
byteval = 2
currNodep = 4237, idx = 141
rightp = 4241, celltyp = PTR, kwd = DO
doParen: downp = 4242
addNode: nodep = 4242, idx = 146, kwd = ZPAREN
; [);]
byteval popped = 1
pop currNodep = 4241, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4226
) byteval popped = 2
1:pop currNodep = 4217
byteval = 29
currNodep = 4217, idx = 121
rightp = 4243, celltyp = PTR, kwd = DO
doParen: downp = 4244
addNode: nodep = 4244, idx = 148, kwd = ZPAREN
; [defun (minimal) do ();]
main loop: doToken = defun
List kwtyp = DEFUN, downp = 12
currNodep = 4244, celltyp = KWD
addNode: nodep = 4244, idx = 148, kwd = DEFUN
defun
doToken: defun
currNodep = 4244, idx = 148
rightp = 4245, celltyp = PTR, kwd = DEFUN
doParen: downp = 4246
addNode: nodep = 4246, idx = 150, kwd = ZPAREN
( main loop: doToken = minimal
Ident added: minimal
Func kwtyp = CALL, downp = 8253
currNodep = 4246, celltyp = FUNC
addNode: nodep = 4246, idx = 150, kwd = CALL
minimal
doToken: minimal
byteval popped = 26
1:pop currNodep = 4245
byteval = 12
) main loop: doToken = do
currNodep = 4245, idx = 149
rightp = 4247, celltyp = DO, kwd = DO
addNode: nodep = 4247, idx = 151, kwd = DO
do
doToken: do
currNodep = 4247, idx = 151
rightp = 4248, celltyp = PTR, kwd = DO
doParen: downp = 4249
addNode: nodep = 4249, idx = 153, kwd = ZPAREN
( byteval popped = 1
pop currNodep = 4248, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4247
) byteval popped = 12
1:pop currNodep = 4243
byteval = 12
currNodep = 4243, idx = 147
rightp = 4250, celltyp = PTR, kwd = DO
doParen: downp = 4251
addNode: nodep = 4251, idx = 155, kwd = ZPAREN
; [class C (: m B) (does p q) (var a b c) (ivar i j k) do (]
main loop: doToken = class
List kwtyp = CLASS, downp = 7
currNodep = 4251, celltyp = KWD
addNode: nodep = 4251, idx = 155, kwd = CLASS
class
doToken: class
main loop: doToken = C
Ident added: C
currNodep = 4251, idx = 155
rightp = 4252, celltyp = ID, kwd = CLASS
addNode: nodep = 4252, idx = 156, kwd = CLASS
C
doToken: C
currNodep = 4252, idx = 156
rightp = 4253, celltyp = PTR, kwd = CLASS
doParen: downp = 4254
addNode: nodep = 4254, idx = 158, kwd = ZPAREN
( main loop: doToken = :
List kwtyp = DOT, downp = 53
currNodep = 4254, celltyp = KWD
addNode: nodep = 4254, idx = 158, kwd = DOT
:
doToken: :
main loop: doToken = m
Ident added: m
currNodep = 4254, idx = 158
rightp = 4255, celltyp = ID, kwd = DOT
addNode: nodep = 4255, idx = 159, kwd = DOT
m
doToken: m
main loop: doToken = B
Ident added: B
currNodep = 4255, idx = 159
rightp = 4256, celltyp = ID, kwd = DOT
addNode: nodep = 4256, idx = 160, kwd = DOT
B
doToken: B
byteval popped = 53
1:pop currNodep = 4253
byteval = 7
) currNodep = 4253, idx = 157
rightp = 4257, celltyp = PTR, kwd = CLASS
doParen: downp = 4258
addNode: nodep = 4258, idx = 162, kwd = ZPAREN
( main loop: doToken = does
List kwtyp = DOES, downp = 21
currNodep = 4258, celltyp = KWD
addNode: nodep = 4258, idx = 162, kwd = DOES
does
doToken: does
main loop: doToken = p
Ident added: p
currNodep = 4258, idx = 162
rightp = 4259, celltyp = ID, kwd = DOES
addNode: nodep = 4259, idx = 163, kwd = DOES
p
doToken: p
main loop: doToken = q
Ident added: q
currNodep = 4259, idx = 163
rightp = 4260, celltyp = ID, kwd = DOES
addNode: nodep = 4260, idx = 164, kwd = DOES
q
doToken: q
byteval popped = 21
1:pop currNodep = 4257
byteval = 7
) currNodep = 4257, idx = 161
rightp = 4261, celltyp = PTR, kwd = CLASS
doParen: downp = 4262
addNode: nodep = 4262, idx = 166, kwd = ZPAREN
( main loop: doToken = var
List kwtyp = VAR, downp = 17
currNodep = 4262, celltyp = KWD
addNode: nodep = 4262, idx = 166, kwd = VAR
var
doToken: var
main loop: doToken = a
Ident added: a
currNodep = 4262, idx = 166
rightp = 4263, celltyp = ID, kwd = VAR
addNode: nodep = 4263, idx = 167, kwd = VAR
a
doToken: a
main loop: doToken = b
Ident added: b
currNodep = 4263, idx = 167
rightp = 4264, celltyp = ID, kwd = VAR
addNode: nodep = 4264, idx = 168, kwd = VAR
b
doToken: b
main loop: doToken = c
Ident added: c
currNodep = 4264, idx = 168
rightp = 4265, celltyp = ID, kwd = VAR
addNode: nodep = 4265, idx = 169, kwd = VAR
c
doToken: c
byteval popped = 17
1:pop currNodep = 4261
byteval = 7
) currNodep = 4261, idx = 165
rightp = 4266, celltyp = PTR, kwd = CLASS
doParen: downp = 4267
addNode: nodep = 4267, idx = 171, kwd = ZPAREN
( main loop: doToken = ivar
List kwtyp = IVAR, downp = 18
currNodep = 4267, celltyp = KWD
addNode: nodep = 4267, idx = 171, kwd = IVAR
ivar
doToken: ivar
main loop: doToken = i
Ident added: i
currNodep = 4267, idx = 171
rightp = 4268, celltyp = ID, kwd = IVAR
addNode: nodep = 4268, idx = 172, kwd = IVAR
i
doToken: i
main loop: doToken = j
Ident added: j
currNodep = 4268, idx = 172
rightp = 4269, celltyp = ID, kwd = IVAR
addNode: nodep = 4269, idx = 173, kwd = IVAR
j
doToken: j
main loop: doToken = k
Ident added: k
currNodep = 4269, idx = 173
rightp = 4270, celltyp = ID, kwd = IVAR
addNode: nodep = 4270, idx = 174, kwd = IVAR
k
doToken: k
byteval popped = 18
1:pop currNodep = 4266
byteval = 7
) main loop: doToken = do
currNodep = 4266, idx = 170
rightp = 4271, celltyp = DO, kwd = DO
addNode: nodep = 4271, idx = 175, kwd = DO
do
doToken: do
currNodep = 4271, idx = 175
rightp = 4272, celltyp = PTR, kwd = DO
doParen: downp = 4273
addNode: nodep = 4273, idx = 177, kwd = ZPAREN
( [defun (altmini) do ();]
main loop: doToken = defun
List kwtyp = DEFUN, downp = 12
currNodep = 4273, celltyp = KWD
addNode: nodep = 4273, idx = 177, kwd = DEFUN
defun
doToken: defun
currNodep = 4273, idx = 177
rightp = 4274, celltyp = PTR, kwd = DEFUN
doParen: downp = 4275
addNode: nodep = 4275, idx = 179, kwd = ZPAREN
( main loop: doToken = altmini
Ident added: altmini
Func kwtyp = CALL, downp = 8265
currNodep = 4275, celltyp = FUNC
addNode: nodep = 4275, idx = 179, kwd = CALL
altmini
doToken: altmini
byteval popped = 26
1:pop currNodep = 4274
byteval = 12
) main loop: doToken = do
currNodep = 4274, idx = 178
rightp = 4276, celltyp = DO, kwd = DO
addNode: nodep = 4276, idx = 180, kwd = DO
do
doToken: do
currNodep = 4276, idx = 180
rightp = 4277, celltyp = PTR, kwd = DO
doParen: downp = 4278
addNode: nodep = 4278, idx = 182, kwd = ZPAREN
( byteval popped = 1
pop currNodep = 4277, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4276
) byteval popped = 12
1:pop currNodep = 4272
byteval = 12
currNodep = 4272, idx = 176
rightp = 4279, celltyp = PTR, kwd = DO
doParen: downp = 4280
addNode: nodep = 4280, idx = 184, kwd = ZPAREN
; [idefun (gz)]
main loop: doToken = idefun
List kwtyp = IDEFUN, downp = 13
currNodep = 4280, celltyp = KWD
addNode: nodep = 4280, idx = 184, kwd = IDEFUN
idefun
doToken: idefun
currNodep = 4280, idx = 184
rightp = 4281, celltyp = PTR, kwd = IDEFUN
doParen: downp = 4282
addNode: nodep = 4282, idx = 186, kwd = ZPAREN
( main loop: doToken = gz
Ident added: gz
Func kwtyp = CALL, downp = 8266
currNodep = 4282, celltyp = FUNC
addNode: nodep = 4282, idx = 186, kwd = CALL
gz
doToken: gz
byteval popped = 26
1:pop currNodep = 4281
byteval = 13
) [(var h1 h2 h3)]
currNodep = 4281, idx = 185
rightp = 4283, celltyp = PTR, kwd = IDEFUN
doParen: downp = 4284
addNode: nodep = 4284, idx = 188, kwd = ZPAREN
( main loop: doToken = var
List kwtyp = VAR, downp = 17
currNodep = 4284, celltyp = KWD
addNode: nodep = 4284, idx = 188, kwd = VAR
var
doToken: var
main loop: doToken = h1
Ident added: h1
currNodep = 4284, idx = 188
rightp = 4285, celltyp = ID, kwd = VAR
addNode: nodep = 4285, idx = 189, kwd = VAR
h1
doToken: h1
main loop: doToken = h2
Ident added: h2
currNodep = 4285, idx = 189
rightp = 4286, celltyp = ID, kwd = VAR
addNode: nodep = 4286, idx = 190, kwd = VAR
h2
doToken: h2
main loop: doToken = h3
Ident added: h3
currNodep = 4286, idx = 190
rightp = 4287, celltyp = ID, kwd = VAR
addNode: nodep = 4287, idx = 191, kwd = VAR
h3
doToken: h3
byteval popped = 17
1:pop currNodep = 4283
byteval = 13
) [do (]
main loop: doToken = do
currNodep = 4283, idx = 187
rightp = 4288, celltyp = DO, kwd = DO
addNode: nodep = 4288, idx = 192, kwd = DO
do
doToken: do
currNodep = 4288, idx = 192
rightp = 4289, celltyp = PTR, kwd = DO
doParen: downp = 4290
addNode: nodep = 4290, idx = 194, kwd = ZPAREN
( [if flag do (]
main loop: doToken = if
List kwtyp = IF, downp = 29
currNodep = 4290, celltyp = KWD
addNode: nodep = 4290, idx = 194, kwd = IF
if
doToken: if
main loop: doToken = flag
Ident added: flag
currNodep = 4290, idx = 194
rightp = 4291, celltyp = ID, kwd = IF
addNode: nodep = 4291, idx = 195, kwd = IF
flag
doToken: flag
main loop: doToken = do
currNodep = 4291, idx = 195
rightp = 4292, celltyp = DO, kwd = DO
addNode: nodep = 4292, idx = 196, kwd = DO
do
doToken: do
currNodep = 4292, idx = 196
rightp = 4293, celltyp = PTR, kwd = DO
doParen: downp = 4294
addNode: nodep = 4294, idx = 198, kwd = ZPAREN
( [set q r;]
main loop: doToken = set
List kwtyp = SET, downp = 54
currNodep = 4294, celltyp = KWD
addNode: nodep = 4294, idx = 198, kwd = SET
set
doToken: set
main loop: doToken = q
Ident added: q
currNodep = 4294, idx = 198
rightp = 4295, celltyp = ID, kwd = SET
addNode: nodep = 4295, idx = 199, kwd = SET
q
doToken: q
main loop: doToken = r
Ident added: r
currNodep = 4295, idx = 199
rightp = 4296, celltyp = ID, kwd = SET
addNode: nodep = 4296, idx = 200, kwd = SET
r
doToken: r
byteval popped = 54
1:pop currNodep = 4293
byteval = 2
currNodep = 4293, idx = 197
rightp = 4297, celltyp = PTR, kwd = DO
doParen: downp = 4298
addNode: nodep = 4298, idx = 202, kwd = ZPAREN
; [);]
byteval popped = 1
pop currNodep = 4297, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4292
) byteval popped = 2
1:pop currNodep = 4289
byteval = 29
currNodep = 4289, idx = 193
rightp = 4299, celltyp = PTR, kwd = DO
doParen: downp = 4300
addNode: nodep = 4300, idx = 204, kwd = ZPAREN
; [set a z;]
main loop: doToken = set
List kwtyp = SET, downp = 54
currNodep = 4300, celltyp = KWD
addNode: nodep = 4300, idx = 204, kwd = SET
set
doToken: set
main loop: doToken = a
Ident added: a
currNodep = 4300, idx = 204
rightp = 4301, celltyp = ID, kwd = SET
addNode: nodep = 4301, idx = 205, kwd = SET
a
doToken: a
main loop: doToken = z
Ident added: z
currNodep = 4301, idx = 205
rightp = 4302, celltyp = ID, kwd = SET
addNode: nodep = 4302, idx = 206, kwd = SET
z
doToken: z
byteval popped = 54
1:pop currNodep = 4299
byteval = 2
currNodep = 4299, idx = 203
rightp = 4303, celltyp = PTR, kwd = DO
doParen: downp = 4304
addNode: nodep = 4304, idx = 208, kwd = ZPAREN
; [);]
byteval popped = 1
pop currNodep = 4303, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4288
) byteval popped = 2
1:pop currNodep = 4279
byteval = 29
currNodep = 4279, idx = 183
rightp = 4305, celltyp = PTR, kwd = DO
doParen: downp = 4306
addNode: nodep = 4306, idx = 210, kwd = ZPAREN
; [);]
byteval popped = 1
pop currNodep = 4305, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4271
) byteval popped = 29
1:pop currNodep = 4250
byteval = 2
currNodep = 4250, idx = 154
rightp = 4307, celltyp = PTR, kwd = DO
doParen: downp = 4308
addNode: nodep = 4308, idx = 212, kwd = ZPAREN
; [)]
byteval popped = 1
pop currNodep = 4307, kwd = DO
2:byteval popped = 2
2:pop currNodep = 4097
) [{]
[iclass D E do ();]
[abclass H do (;);]
[scool S do ();]
[iscool T does (S) do ();]
[enum e a b c;]
[ienum f x y;]
[);]
[}]
[]
rightp = 4096, idx = 0, kwd = NULL, celtyp = KWD
rightp = 4097, idx = 1, kwd = DO, celtyp = DO
Here is open par!
root downp = 4098, rightp = 0
rightp = 4098, idx = 2, kwd = DO, celtyp = PTR
Here is (
rightp = 4099, idx = 3, kwd = IMPORT, celtyp = KWD
rightp = 4100, idx = 4, kwd = IMPORT, celtyp = ID
rightp = 4101, idx = 5, kwd = IMPORT, celtyp = PTR
Here is (
rightp = 4102, idx = 6, kwd = AS, celtyp = KWD
rightp = 4103, idx = 7, kwd = AS, celtyp = ID
rightp = 4104, idx = 8, kwd = AS, celtyp = ID
Here is )
rightp = 4105, idx = 9, kwd = IMPORT, celtyp = ID
rightp = 4106, idx = 10, kwd = IMPORT, celtyp = PTR
Here is (
rightp = 4107, idx = 11, kwd = AS, celtyp = KWD
rightp = 4108, idx = 12, kwd = AS, celtyp = PTR
Here is (
rightp = 4109, idx = 13, kwd = DOT, celtyp = KWD
rightp = 4110, idx = 14, kwd = DOT, celtyp = ID
rightp = 4111, idx = 15, kwd = DOT, celtyp = ID
Here is )
rightp = 4112, idx = 16, kwd = AS, celtyp = ID
Here is )
Here is )
rightp = 4113, idx = 17, kwd = DO, celtyp = PTR
Here is (
rightp = 4114, idx = 18, kwd = IMPORT, celtyp = KWD
rightp = 4115, idx = 19, kwd = IMPORT, celtyp = ID
rightp = 4116, idx = 20, kwd = IMPORT, celtyp = PTR
Here is (
rightp = 4117, idx = 21, kwd = DOT, celtyp = KWD
rightp = 4118, idx = 22, kwd = DOT, celtyp = ID
rightp = 4119, idx = 23, kwd = DOT, celtyp = ID
Here is )
rightp = 4120, idx = 24, kwd = IMPORT, celtyp = ID
Here is )
rightp = 4121, idx = 25, kwd = DO, celtyp = PTR
Here is (
rightp = 4122, idx = 26, kwd = FROM, celtyp = KWD
rightp = 4123, idx = 27, kwd = FROM, celtyp = PTR
Here is (
rightp = 4124, idx = 28, kwd = DOT, celtyp = KWD
rightp = 4125, idx = 29, kwd = DOT, celtyp = ID
rightp = 4126, idx = 30, kwd = DOT, celtyp = ID
rightp = 4127, idx = 31, kwd = DOT, celtyp = ID
rightp = 4128, idx = 32, kwd = DOT, celtyp = ID
rightp = 4129, idx = 33, kwd = DOT, celtyp = ID
Here is )
rightp = 4130, idx = 34, kwd = IMPORT, celtyp = KWD
rightp = 4131, idx = 35, kwd = IMPORT, celtyp = ID
rightp = 4132, idx = 36, kwd = IMPORT, celtyp = PTR
Here is (
rightp = 4133, idx = 37, kwd = AS, celtyp = KWD
rightp = 4134, idx = 38, kwd = AS, celtyp = ID
rightp = 4135, idx = 39, kwd = AS, celtyp = ID
Here is )
Here is )
rightp = 4136, idx = 40, kwd = DO, celtyp = PTR
Here is (
rightp = 4137, idx = 41, kwd = FROM, celtyp = KWD
rightp = 4138, idx = 42, kwd = FROM, celtyp = ID
rightp = 4139, idx = 43, kwd = IMPORT, celtyp = KWD
rightp = 4140, idx = 44, kwd = IMPORT, celtyp = ID
rightp = 4141, idx = 45, kwd = IMPORT, celtyp = PTR
Here is (
rightp = 4142, idx = 46, kwd = AS, celtyp = KWD
rightp = 4143, idx = 47, kwd = AS, celtyp = ID
rightp = 4144, idx = 48, kwd = AS, celtyp = ID
Here is )
rightp = 4145, idx = 49, kwd = IMPORT, celtyp = ID
rightp = 4146, idx = 50, kwd = IMPORT, celtyp = PTR
Here is (
rightp = 4147, idx = 51, kwd = AS, celtyp = KWD
rightp = 4148, idx = 52, kwd = AS, celtyp = ID
rightp = 4149, idx = 53, kwd = AS, celtyp = ID
Here is )
Here is )
rightp = 4150, idx = 54, kwd = DO, celtyp = PTR
Here is (
rightp = 4151, idx = 55, kwd = GDEFUN, celtyp = KWD
rightp = 4152, idx = 56, kwd = GDEFUN, celtyp = PTR
Here is (
rightp = 4153, idx = 57, kwd = VAR, celtyp = KWD
rightp = 4154, idx = 58, kwd = VAR, celtyp = ID
rightp = 4155, idx = 59, kwd = VAR, celtyp = ID
rightp = 4156, idx = 60, kwd = VAR, celtyp = ID
Here is )
rightp = 4157, idx = 61, kwd = GDEFUN, celtyp = PTR
Here is (
rightp = 4158, idx = 62, kwd = IVAR, celtyp = KWD
rightp = 4159, idx = 63, kwd = IVAR, celtyp = ID
Here is )
rightp = 4160, idx = 64, kwd = DO, celtyp = DO
Here is (
rightp = 4161, idx = 65, kwd = DO, celtyp = PTR
Here is (
rightp = 4162, idx = 66, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4163, idx = 67, kwd = DO, celtyp = PTR
Here is (
rightp = 4164, idx = 68, kwd = DEFUN, celtyp = KWD
rightp = 4165, idx = 69, kwd = DEFUN, celtyp = PTR
Here is (
rightp = 4166, idx = 70, kwd = CALL, celtyp = FUNC
rightp = 4167, idx = 71, kwd = CALL, celtyp = ID
rightp = 4168, idx = 72, kwd = CALL, celtyp = ID
rightp = 4169, idx = 73, kwd = CALL, celtyp = PTR
Here is (
rightp = 4170, idx = 74, kwd = SET, celtyp = KWD
rightp = 4171, idx = 75, kwd = SET, celtyp = ID
rightp = 4172, idx = 76, kwd = SET, celtyp = INT
Here is )
rightp = 4173, idx = 77, kwd = CALL, celtyp = PTR
Here is (
rightp = 4174, idx = 78, kwd = SET, celtyp = KWD
rightp = 4175, idx = 79, kwd = SET, celtyp = ID
rightp = 4176, idx = 80, kwd = SET, celtyp = STRING
Here is )
rightp = 4177, idx = 81, kwd = CALL, celtyp = PTR
Here is (
rightp = 4178, idx = 82, kwd = SET, celtyp = KWD
rightp = 4179, idx = 83, kwd = SET, celtyp = ID
rightp = 4180, idx = 84, kwd = SET, celtyp = DOUBLE
Here is )
rightp = 4181, idx = 85, kwd = CALL, celtyp = PTR
Here is (
rightp = 4182, idx = 86, kwd = MPY, celtyp = KWD
rightp = 4183, idx = 87, kwd = MPY, celtyp = ID
Here is )
rightp = 4184, idx = 88, kwd = CALL, celtyp = PTR
Here is (
rightp = 4185, idx = 89, kwd = DBLSTAR, celtyp = KWD
rightp = 4186, idx = 90, kwd = DBLSTAR, celtyp = ID
Here is )
Here is )
rightp = 4187, idx = 91, kwd = DEFUN, celtyp = PTR
Here is (
rightp = 4188, idx = 92, kwd = VAR, celtyp = KWD
rightp = 4189, idx = 93, kwd = VAR, celtyp = ID
rightp = 4190, idx = 94, kwd = VAR, celtyp = ID
Here is )
rightp = 4191, idx = 95, kwd = DEFUN, celtyp = PTR
Here is (
rightp = 4192, idx = 96, kwd = DECOR, celtyp = KWD
rightp = 4193, idx = 97, kwd = DECOR, celtyp = ID
rightp = 4194, idx = 98, kwd = DECOR, celtyp = ID
rightp = 4195, idx = 99, kwd = DECOR, celtyp = ID
rightp = 4196, idx = 100, kwd = DECOR, celtyp = PTR
Here is (
rightp = 4197, idx = 101, kwd = CALL, celtyp = FUNC
rightp = 4198, idx = 102, kwd = CALL, celtyp = ID
Here is )
rightp = 4199, idx = 103, kwd = DECOR, celtyp = PTR
Here is (
rightp = 4200, idx = 104, kwd = DOT, celtyp = KWD
rightp = 4201, idx = 105, kwd = DOT, celtyp = ID
rightp = 4202, idx = 106, kwd = DOT, celtyp = PTR
Here is (
rightp = 4203, idx = 107, kwd = CALL, celtyp = FUNC
rightp = 4204, idx = 108, kwd = CALL, celtyp = ID
Here is )
Here is )
rightp = 4205, idx = 109, kwd = DECOR, celtyp = PTR
Here is (
rightp = 4206, idx = 110, kwd = DOT, celtyp = KWD
rightp = 4207, idx = 111, kwd = DOT, celtyp = ID
rightp = 4208, idx = 112, kwd = DOT, celtyp = PTR
Here is (
rightp = 4209, idx = 113, kwd = CALL, celtyp = FUNC
Here is )
Here is )
Here is )
rightp = 4210, idx = 114, kwd = DO, celtyp = DO
Here is (
rightp = 4211, idx = 115, kwd = DO, celtyp = PTR
Here is (
rightp = 4212, idx = 116, kwd = SET, celtyp = KWD
rightp = 4213, idx = 117, kwd = SET, celtyp = ID
rightp = 4214, idx = 118, kwd = SET, celtyp = INT
Here is )
rightp = 4215, idx = 119, kwd = DO, celtyp = PTR
Here is (
rightp = 4216, idx = 120, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4217, idx = 121, kwd = DO, celtyp = PTR
Here is (
rightp = 4218, idx = 122, kwd = IDEFUN, celtyp = KWD
rightp = 4219, idx = 123, kwd = IDEFUN, celtyp = PTR
Here is (
rightp = 4220, idx = 124, kwd = CALL, celtyp = FUNC
Here is )
rightp = 4221, idx = 125, kwd = IDEFUN, celtyp = PTR
Here is (
rightp = 4222, idx = 126, kwd = VAR, celtyp = KWD
rightp = 4223, idx = 127, kwd = VAR, celtyp = ID
rightp = 4224, idx = 128, kwd = VAR, celtyp = ID
rightp = 4225, idx = 129, kwd = VAR, celtyp = ID
Here is )
rightp = 4226, idx = 130, kwd = DO, celtyp = DO
Here is (
rightp = 4227, idx = 131, kwd = DO, celtyp = PTR
Here is (
rightp = 4228, idx = 132, kwd = IF, celtyp = KWD
rightp = 4229, idx = 133, kwd = IF, celtyp = ID
rightp = 4230, idx = 134, kwd = DO, celtyp = DO
Here is (
rightp = 4231, idx = 135, kwd = DO, celtyp = PTR
Here is (
rightp = 4232, idx = 136, kwd = SET, celtyp = KWD
rightp = 4233, idx = 137, kwd = SET, celtyp = ID
rightp = 4234, idx = 138, kwd = SET, celtyp = ID
Here is )
rightp = 4235, idx = 139, kwd = DO, celtyp = PTR
Here is (
rightp = 4236, idx = 140, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4237, idx = 141, kwd = DO, celtyp = PTR
Here is (
rightp = 4238, idx = 142, kwd = SET, celtyp = KWD
rightp = 4239, idx = 143, kwd = SET, celtyp = ID
rightp = 4240, idx = 144, kwd = SET, celtyp = ID
Here is )
rightp = 4241, idx = 145, kwd = DO, celtyp = PTR
Here is (
rightp = 4242, idx = 146, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4243, idx = 147, kwd = DO, celtyp = PTR
Here is (
rightp = 4244, idx = 148, kwd = DEFUN, celtyp = KWD
rightp = 4245, idx = 149, kwd = DEFUN, celtyp = PTR
Here is (
rightp = 4246, idx = 150, kwd = CALL, celtyp = FUNC
Here is )
rightp = 4247, idx = 151, kwd = DO, celtyp = DO
Here is (
rightp = 4248, idx = 152, kwd = DO, celtyp = PTR
Here is (
rightp = 4249, idx = 153, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4250, idx = 154, kwd = DO, celtyp = PTR
Here is (
rightp = 4251, idx = 155, kwd = CLASS, celtyp = KWD
rightp = 4252, idx = 156, kwd = CLASS, celtyp = ID
rightp = 4253, idx = 157, kwd = CLASS, celtyp = PTR
Here is (
rightp = 4254, idx = 158, kwd = DOT, celtyp = KWD
rightp = 4255, idx = 159, kwd = DOT, celtyp = ID
rightp = 4256, idx = 160, kwd = DOT, celtyp = ID
Here is )
rightp = 4257, idx = 161, kwd = CLASS, celtyp = PTR
Here is (
rightp = 4258, idx = 162, kwd = DOES, celtyp = KWD
rightp = 4259, idx = 163, kwd = DOES, celtyp = ID
rightp = 4260, idx = 164, kwd = DOES, celtyp = ID
Here is )
rightp = 4261, idx = 165, kwd = CLASS, celtyp = PTR
Here is (
rightp = 4262, idx = 166, kwd = VAR, celtyp = KWD
rightp = 4263, idx = 167, kwd = VAR, celtyp = ID
rightp = 4264, idx = 168, kwd = VAR, celtyp = ID
rightp = 4265, idx = 169, kwd = VAR, celtyp = ID
Here is )
rightp = 4266, idx = 170, kwd = CLASS, celtyp = PTR
Here is (
rightp = 4267, idx = 171, kwd = IVAR, celtyp = KWD
rightp = 4268, idx = 172, kwd = IVAR, celtyp = ID
rightp = 4269, idx = 173, kwd = IVAR, celtyp = ID
rightp = 4270, idx = 174, kwd = IVAR, celtyp = ID
Here is )
rightp = 4271, idx = 175, kwd = DO, celtyp = DO
Here is (
rightp = 4272, idx = 176, kwd = DO, celtyp = PTR
Here is (
rightp = 4273, idx = 177, kwd = DEFUN, celtyp = KWD
rightp = 4274, idx = 178, kwd = DEFUN, celtyp = PTR
Here is (
rightp = 4275, idx = 179, kwd = CALL, celtyp = FUNC
Here is )
rightp = 4276, idx = 180, kwd = DO, celtyp = DO
Here is (
rightp = 4277, idx = 181, kwd = DO, celtyp = PTR
Here is (
rightp = 4278, idx = 182, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4279, idx = 183, kwd = DO, celtyp = PTR
Here is (
rightp = 4280, idx = 184, kwd = IDEFUN, celtyp = KWD
rightp = 4281, idx = 185, kwd = IDEFUN, celtyp = PTR
Here is (
rightp = 4282, idx = 186, kwd = CALL, celtyp = FUNC
Here is )
rightp = 4283, idx = 187, kwd = IDEFUN, celtyp = PTR
Here is (
rightp = 4284, idx = 188, kwd = VAR, celtyp = KWD
rightp = 4285, idx = 189, kwd = VAR, celtyp = ID
rightp = 4286, idx = 190, kwd = VAR, celtyp = ID
rightp = 4287, idx = 191, kwd = VAR, celtyp = ID
Here is )
rightp = 4288, idx = 192, kwd = DO, celtyp = DO
Here is (
rightp = 4289, idx = 193, kwd = DO, celtyp = PTR
Here is (
rightp = 4290, idx = 194, kwd = IF, celtyp = KWD
rightp = 4291, idx = 195, kwd = IF, celtyp = ID
rightp = 4292, idx = 196, kwd = DO, celtyp = DO
Here is (
rightp = 4293, idx = 197, kwd = DO, celtyp = PTR
Here is (
rightp = 4294, idx = 198, kwd = SET, celtyp = KWD
rightp = 4295, idx = 199, kwd = SET, celtyp = ID
rightp = 4296, idx = 200, kwd = SET, celtyp = ID
Here is )
rightp = 4297, idx = 201, kwd = DO, celtyp = PTR
Here is (
rightp = 4298, idx = 202, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4299, idx = 203, kwd = DO, celtyp = PTR
Here is (
rightp = 4300, idx = 204, kwd = SET, celtyp = KWD
rightp = 4301, idx = 205, kwd = SET, celtyp = ID
rightp = 4302, idx = 206, kwd = SET, celtyp = ID
Here is )
rightp = 4303, idx = 207, kwd = DO, celtyp = PTR
Here is (
rightp = 4304, idx = 208, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4305, idx = 209, kwd = DO, celtyp = PTR
Here is (
rightp = 4306, idx = 210, kwd = ZPAREN, celtyp = NULL
Here is )
Here is )
Here is )
rightp = 4307, idx = 211, kwd = DO, celtyp = PTR
Here is (
rightp = 4308, idx = 212, kwd = ZPAREN, celtyp = NULL
Here is )
Here is close par!
Nodes created = 213
Lists created = 71

Lines read = 48

Tokens found: Identifiers
  Count of KEYWORD = 46
  Count of IDENTIFIER = 82
Tokens found: Numeric Literals
  Count of DECIMAL = 2
  Count of FLOAT = 1
Tokens found: Punctuation
  Count of OPENPAR = 43
  Count of CLOSEPAR = 43
  Count of SEMICOLON = 18
  Count of CMTLINE = 1
  Count of CMTBLK = 1
  Count of STRLIT = 1
  Count of OPERATOR = 9

Top of isValidCoop
rightp = 4096, idx = 0, kwd = NULL, celtyp = KWD
rightp = 4097, idx = 1, kwd = DO, celtyp = DO
Here is open par!
root downp = 4098, rightp = 0
rightp = 4098, idx = 2, kwd = DO, celtyp = PTR
Here is (
rightp = 4099, idx = 3, kwd = IMPORT, celtyp = KWD
Statement kwd = IMPORT
modCount = 1
celltyp = ID
modCount = 2
modCount = 3
celltyp = ID
modCount = 4
rightp = 4100, idx = 4, kwd = IMPORT, celtyp = ID
rightp = 4101, idx = 5, kwd = IMPORT, celtyp = PTR
Here is ()
rightp = 4105, idx = 9, kwd = IMPORT, celtyp = ID
rightp = 4106, idx = 10, kwd = IMPORT, celtyp = PTR
Here is ()
Here is )
rightp = 4113, idx = 17, kwd = DO, celtyp = PTR
Here is (
rightp = 4114, idx = 18, kwd = IMPORT, celtyp = KWD
Statement kwd = IMPORT
modCount = 1
celltyp = ID
modCount = 2
celltyp = PTR, (: a b)
modCount = 3
celltyp = ID
rightp = 4115, idx = 19, kwd = IMPORT, celtyp = ID
rightp = 4116, idx = 20, kwd = IMPORT, celtyp = PTR
Here is ()
rightp = 4120, idx = 24, kwd = IMPORT, celtyp = ID
Here is )
rightp = 4121, idx = 25, kwd = DO, celtyp = PTR
Here is (
rightp = 4122, idx = 26, kwd = FROM, celtyp = KWD
Statement kwd = FROM
modCount = 1
celltyp = ID
modCount = 2
rightp = 4123, idx = 27, kwd = FROM, celtyp = PTR
Here is ()
rightp = 4130, idx = 34, kwd = IMPORT, celtyp = KWD
rightp = 4131, idx = 35, kwd = IMPORT, celtyp = ID
rightp = 4132, idx = 36, kwd = IMPORT, celtyp = PTR
Here is ()
Here is )
rightp = 4136, idx = 40, kwd = DO, celtyp = PTR
Here is (
rightp = 4137, idx = 41, kwd = FROM, celtyp = KWD
Statement kwd = FROM
modCount = 1
celltyp = ID
modCount = 2
modCount = 3
celltyp = ID
modCount = 4
rightp = 4138, idx = 42, kwd = FROM, celtyp = ID
rightp = 4139, idx = 43, kwd = IMPORT, celtyp = KWD
rightp = 4140, idx = 44, kwd = IMPORT, celtyp = ID
rightp = 4141, idx = 45, kwd = IMPORT, celtyp = PTR
Here is ()
rightp = 4145, idx = 49, kwd = IMPORT, celtyp = ID
rightp = 4146, idx = 50, kwd = IMPORT, celtyp = PTR
Here is ()
Here is )
rightp = 4150, idx = 54, kwd = DO, celtyp = PTR
Here is (
rightp = 4151, idx = 55, kwd = GDEFUN, celtyp = KWD
Statement kwd = GDEFUN
var (): count = 1
var (): count = 2
var (): count = 3
var (): count = 1
gdefun: chk DO
rightp = 4152, idx = 56, kwd = GDEFUN, celtyp = PTR
Here is ()
rightp = 4157, idx = 61, kwd = GDEFUN, celtyp = PTR
Here is ()
rightp = 4160, idx = 64, kwd = DO, celtyp = DO
Here is ()
Here is )
rightp = 4163, idx = 67, kwd = DO, celtyp = PTR
Here is (
rightp = 4164, idx = 68, kwd = DEFUN, celtyp = KWD
Statement kwd = DEFUN
parm # 1
parm # 2
parm # 3
parm # 4
parm # 5
parm # 6
parm # 7
var (): count = 1
var (): count = 2
decor # 1
decor # 2
decor # 3
var (): count = 1
var (): count = 2
decor # 4
dotCall: count = 1
var (): count = 1
var (): count = 2
decor # 5
dotCall: count = 1
var (): count = 1
decor # 6
gdefun: chk DO
rightp = 4165, idx = 69, kwd = DEFUN, celtyp = PTR
Here is ()
rightp = 4187, idx = 91, kwd = DEFUN, celtyp = PTR
Here is ()
rightp = 4191, idx = 95, kwd = DEFUN, celtyp = PTR
Here is ()
rightp = 4210, idx = 114, kwd = DO, celtyp = DO
Here is ()
Here is )
rightp = 4217, idx = 121, kwd = DO, celtyp = PTR
Here is (
rightp = 4218, idx = 122, kwd = IDEFUN, celtyp = KWD
Statement kwd = IDEFUN
var (): count = 1
var (): count = 2
var (): count = 3
gdefun: chk DO
rightp = 4219, idx = 123, kwd = IDEFUN, celtyp = PTR
Here is ()
rightp = 4221, idx = 125, kwd = IDEFUN, celtyp = PTR
Here is ()
rightp = 4226, idx = 130, kwd = DO, celtyp = DO
Here is ()
Here is )
rightp = 4243, idx = 147, kwd = DO, celtyp = PTR
Here is (
rightp = 4244, idx = 148, kwd = DEFUN, celtyp = KWD
Statement kwd = DEFUN
gdefun: chk DO
rightp = 4245, idx = 149, kwd = DEFUN, celtyp = PTR
Here is ()
rightp = 4247, idx = 151, kwd = DO, celtyp = DO
Here is ()
Here is )
rightp = 4250, idx = 154, kwd = DO, celtyp = PTR
Here is (
rightp = 4251, idx = 155, kwd = CLASS, celtyp = KWD
Statement kwd = CLASS
var (): count = 1
var (): count = 2
var (): count = 1
var (): count = 2
var (): count = 3
var (): count = 1
var (): count = 2
var (): count = 3
class: chk DO
doDefBlock (): OK - 3
gdefun: chk DO
doDefBlock (): OK - 3
var (): count = 1
var (): count = 2
var (): count = 3
gdefun: chk DO
rightp = 4252, idx = 156, kwd = CLASS, celtyp = ID
rightp = 4253, idx = 157, kwd = CLASS, celtyp = PTR
Here is ()
rightp = 4257, idx = 161, kwd = CLASS, celtyp = PTR
Here is ()
rightp = 4261, idx = 165, kwd = CLASS, celtyp = PTR
Here is ()
rightp = 4266, idx = 170, kwd = CLASS, celtyp = PTR
Here is ()
rightp = 4271, idx = 175, kwd = DO, celtyp = DO
Here is ()
Here is )
rightp = 4307, idx = 211, kwd = DO, celtyp = PTR
Here is (
rightp = 4308, idx = 212, kwd = ZPAREN, celtyp = NULL
Statement kwd = ZPAREN
Here is )
Zparen found
Here is close par!
Stmt count = 9
Coop file is valid.
